// # Exerc√≠cio 3 - Crie uma fun√ß√£o que recebe do usu√°rio sua nacionalidade, utilizando um **prompt** com a seguinte mensagem: "Escreva aqui sua nacionalidade." e guarde o valor da resposta em uma const `nacionalidade`.

// Vamos considerar que nosso programa aceita as seguintes 5 nacionalidades:
// - brasileira;
// - argentina;
// - uruguaia;
// - chilena;
// - colombiana;

// Crie uma estrutura de `if/else if/else` que verifique se a nacionalidade guardada na const `nacionalidade` √© igual a cada uma das nacionalidades acima, e caso seja, imprima a nacionalidade no console. O √∫ltimo `else` deve imprimir "nacionalidade n√£o encontrada" caso o valor de `nacionalidade` n√£o corresponda a nenhuma das possibilidades acima.

// > üí° Lembre-se de prestar aten√ß√£o √†s letras mai√∫sculas e min√∫sculas. 

// ########################################################################################


// 1¬™ forma de resolver, que √© inclusive exatamente o que pede o enunciado. 

const arrayNacionalidades = ["brasileira", "argentina", "uruguaia", "chilena", "colombiana"]
// const nacionalidade = prompt("Digite aqui a sua nacionalidade:").toLocaleLowerCase()
const nacionalidade = "BrAsiLeIrA".toLocaleLowerCase()

function checaNacionalidade (parametroDaFuncao) {

    if (arrayNacionalidades.includes(parametroDaFuncao)){

        console.log("Nacionalidade detectada:",parametroDaFuncao);
    
    }else {

        console.log("Nacionalidade n√£o encontrada! :(");
    }

}
 checaNacionalidade(nacionalidade)
 checaNacionalidade("italiana")
 checaNacionalidade("argentina")
 checaNacionalidade("peruana")

// A resolu√ß√£o acima representa a forma exata que pedia o enunciado (exceto que deixei o prompt comentado pra otimizar os testes). Para refor√ßar o que aprendi hoje sobre a confus√£o entre nome de vari√°vel, nome de par√¢metro da fun√ß√£o, const dentro ou fora da fun√ß√£o, nome de argumento ou a d√∫vida de qual argumento passar, a fun√ß√£o acima √© o mesmo caso da forma 3 que resolvi o exerc√≠cio 1. Esse √© o modelo menos chumbado, mas que n√£o √© totalmente gen√©rico, pois temos uma const fora da fun√ß√£o, e aproveitamos e a chamamos na primeira linha ali com o nome da fun√ß√£o e o nome da const. Ocorre que neste formato, tamb√©m podemos passar outros argumentos, neste caso strings diretas para testar o programa, e temos no Console o resultado devidamente esperado. Vejam que deixei bem claro ali no lugar do par√¢metro que se trata do par√¢metro da fun√ß√£o, e n√£o necessariamente precisamos colocar o nome da const, pois mesmo que fossem nomes iguais, seriam na pr√°tica coisas diferentes, e isso pode inclusive mais confundir do que ajudar. A mesma nomenclatura utilizei no if e no console.log, o que permite neste caso ent√£o fazer a leitura tanto do dado armazenado na const como no dado inputado manualmente ao chamar a fun√ß√£o (ex: "√Øtaliana).

// ########################################################################################

// 2¬™ forma de resolver
const arrayNacionalidades2 = ["brasileira", "argentina", "uruguaia", "chilena", "colombiana"]
//  const nacionalidade2 = "italiana"
 
function checaNacionalidade2 () {
 
    const nacionalidade2 = "italiana"
 
     if (arrayNacionalidades2.includes(nacionalidade2)){
 
         console.log(nacionalidade2);
     
     }else {
 
         console.log("nacionalidade n√£o encontrada");
     }
 
 }
  checaNacionalidade2()
  checaNacionalidade2("brasileira")

// A resolu√ß√£o acima se trata portanto da forma chumbada que j√° explicamos no exerc√≠cio 1, e que deve ser evitada caso o exerc√≠cio ou o cen√°rio n√£o pe√ßam nada parecido com isso. Vejam que aqui o argumento da fun√ß√£o est√° vazio, e no if e no console.log o dado informado √© o nome da const, que neste caso √© exatamente ele que est√° ali no c√≥digo e que vai gerar o booleano do if. A chamada da fun√ß√£o, por sua vez, tamb√©m deve vir vazia para a fun√ß√£o rodar. Na verdade eu testei e coloquei um dado ao chamar a fun√ß√£o novamente, e ela ignorou o argumento e considerou novamente a nacionalidade como n√£o encontrada, por isso chamamos esse tipo de l√≥gica como chumbada, ou seja, o que vale √© a informa√ß√£o que est√° ali na const e fim de papo. 

// ########################################################################################

// 3¬™ forma de resolver
const arrayNacionalidades3 = ["brasileira", "argentina", "uruguaia", "chilena", "colombiana"]
  // const nacionalidade = prompt("Digite aqui a sua nacionalidade:").toLocaleLowerCase()
const nacionalidade3 = "BrAsiLeIrA".toLocaleLowerCase()
  
function checaNacionalidade3 () {
  
      if (arrayNacionalidades3.includes(nacionalidade3)){
  
          console.log("Nacionalidade detectada:",nacionalidade3);
      
      }else {
  
          console.log("Nacionalidade n√£o encontrada! :(");
      }
  
  }
   checaNacionalidade3(nacionalidade3)
   checaNacionalidade3("italiana")
   checaNacionalidade3("argentina")
   checaNacionalidade3("peruana")


// Essa terceira resolu√ß√£o √© muito semelhante a segunda, poder√≠amos dizer que est√° chumbada tamb√©m mesmo a const estando fora dela. Como deixamos o par√¢metro vazio e os dados que v√£o trazer o boolean s√£o exatamente a const, no momento que chamamos a fun√ß√£o com o nome da const ela at√© nos d√° a resposta esperada, mas quando inserimos outros argumentos diretos, ela despreza as strings e considera apenas a chamada da fun√ß√£o, e mesmo sem termos inserido o nome da const, ela simplesmente repete 4 vezes a nacionalidade brasileira no Console.

// ########################################################################################

// 4¬™ forma de resolver 
const arrayNacionalidades4 = ["brasileira", "argentina", "uruguaia", "chilena", "colombiana"]
   // const nacionalidade = prompt("Digite aqui a sua nacionalidade:").toLocaleLowerCase()
//    const nacionalidade3 = "BrAsiLeIrA".toLocaleLowerCase()
   
function checaNacionalidade4 (parametroDaFuncao2) {
   
       if (arrayNacionalidades4.includes(parametroDaFuncao2)){
   
           console.log("Nacionalidade detectada:",parametroDaFuncao2);
       
       }else {
   
           console.log("Nacionalidade n√£o encontrada! :(");
       }
   
   }
    // checaNacionalidade3(nacionalidade3)
    checaNacionalidade4("italiana")
    checaNacionalidade4("argentina")
    checaNacionalidade4("peruana")

// Enfim a √∫ltima resolu√ß√£o testada para o exerc√≠cio 3, e aqui sim fizemos a fun√ß√£o gen√©rica, na qual n√£o temos a figura da vari√°vel const, temos ali os par√¢metros da fun√ß√£o tanto no par√¢metro quanto na l√≥gica do if e no console.log, e aco chamar a fun√ß√£o a gente mesmo digita os dados que queremos e a fun√ß√£o roda perfeitamente de acordo com os valores esperados como resposta no Console. 
